from typing import Optional, List, Any


class Console:
    class MessageType:
        Info: int
        Warning: int
        Error: int
        Debug: int
        Success: int
        Performance: int
        Notice: int

    # --- Logging & Metadata ---
    @staticmethod
    def Log(
        module_name: str,
        message: str,
        type: int = Console.MessageType.Info
    ) -> None: ...

    @staticmethod
    def GetCredits() -> str: ...
    @staticmethod
    def GetLicense() -> str: ...
    @staticmethod
    def get_gw_window_handle() -> Any: ...
    @staticmethod
    def get_projects_path() -> str: ...
    @staticmethod
    def resize_window(width: int, height: int) -> None: ...
    @staticmethod
    def move_window_to(x: int, y: int) -> None: ...
    @staticmethod
    def set_window_active() -> None: ...
    @staticmethod
    def set_window_geometry(x: int, y: int, width: int, height: int) -> None: ...
    @staticmethod
    def get_window_rect() -> tuple[int, int, int, int]: ...
    @staticmethod
    def get_client_rect() -> tuple[int, int, int, int]: ...
    @staticmethod
    def set_window_title(title: str) -> None: ...
    @staticmethod
    def is_window_active() -> bool: ...
    @staticmethod
    def is_window_minimized() -> bool: ...
    @staticmethod
    def is_window_in_background() -> bool: ...
    @staticmethod
    def set_borderless(enable: bool) -> None: ...
    @staticmethod
    def set_always_on_top(enable: bool) -> None: ...
    @staticmethod
    def flash_window() -> None: ...
    @staticmethod
    def request_attention() -> None: ...
    @staticmethod
    def get_z_order() -> int: ...
    @staticmethod
    def set_z_order(insert_after_HWND: int) -> None: ...
    @staticmethod
    def send_window_to_back() -> None: ...
    @staticmethod
    def bring_window_to_front() -> None: ...
    @staticmethod
    def transparent_click_through(enable: bool) -> None: ...
    @staticmethod
    #0-255
    def adjust_window_opacity(opacity: int ) -> None: ...
    @staticmethod
    def hide_window() -> None: ...
    @staticmethod
    def show_window() -> None: ...

    # --- Script Control (Immediate) ---
    @staticmethod
    def load(path: str) -> None: ...
    @staticmethod
    def run() -> None: ...
    @staticmethod
    def stop() -> None: ...
    @staticmethod
    def pause() -> None: ...
    @staticmethod
    def resume() -> None: ...
    @staticmethod
    def status() -> str: ...

    # --- Script Control (Deferred wrappers) ---
    @staticmethod
    def defer_load(path: str, delay_ms: int = 1000) -> None: ...
    @staticmethod
    def defer_run(delay_ms: int = 1000) -> None: ...
    @staticmethod
    def defer_stop(delay_ms: int = 1000) -> None: ...
    @staticmethod
    def defer_pause(delay_ms: int = 1000) -> None: ...
    @staticmethod
    def defer_resume(delay_ms: int = 1000) -> None: ...
    # --- Mixed Deferred Wrappers ---
    @staticmethod
    def defer_load_and_run(path: str, delay_ms: int = 1000) -> None: ...
    @staticmethod
    def defer_stop_load_and_run(path: str, delay_ms: int = 1000) -> None: ...
    @staticmethod
    def defer_stop_and_run(delay_ms: int = 1000) -> None: ...


class PingHandler:
    def __init__(self, history_size: int = 10) -> None: ...
    def Terminate(self) -> None: ...
    def GetCurrentPing(self) -> int: ...
    def GetAveragePing(self) -> int: ...
    def GetMinPing(self) -> int: ...
    def GetMaxPing(self) -> int: ...
